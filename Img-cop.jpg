<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Compressor</title>
    <style>
        :root {
            --primary: #4a6bff;
            --secondary: #3a56d4;
            --light: #f8f9ff;
            --dark: #2d3748;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f7ff;
            color: var(--dark);
            line-height: 1.6;
            padding: 20px;
        }
        
        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        h1 {
            color: var(--primary);
            margin-bottom: 10px;
        }
        
        .tool-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            padding: 30px;
            margin-bottom: 30px;
        }
        
        .upload-container {
            position: relative;
            border: 2px dashed #cbd5e0;
            border-radius: 8px;
            padding: 40px 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 25px;
            background-color: var(--light);
        }
        
        .upload-container:hover {
            border-color: var(--primary);
            background-color: rgba(74, 107, 255, 0.05);
        }
        
        .upload-icon {
            font-size: 48px;
            color: var(--primary);
            margin-bottom: 15px;
        }
        
        .controls {
            margin: 25px 0;
        }
        
        .slider-container {
            margin-bottom: 25px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--dark);
        }
        
        input[type="range"] {
            width: 100%;
            height: 8px;
            -webkit-appearance: none;
            background: #e2e8f0;
            border-radius: 5px;
            outline: none;
            margin-bottom: 5px;
        }
        
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 20px;
            height: 20px;
            background: var(--primary);
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        input[type="range"]::-webkit-slider-thumb:hover {
            transform: scale(1.1);
        }
        
        .value-display {
            display: flex;
            justify-content: space-between;
            font-size: 14px;
            color: #64748b;
        }
        
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 16px;
        }
        
        .btn-primary {
            background: linear-gradient(to right, var(--primary), var(--secondary));
            color: white;
            box-shadow: 0 4px 12px rgba(74, 107, 255, 0.25);
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(74, 107, 255, 0.3);
        }
        
        .btn:disabled {
            background: #cbd5e0;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .preview-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 30px 0;
        }
        
        .image-box {
            background: white;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        
        .image-preview {
            max-width: 100%;
            max-height: 300px;
            border-radius: 6px;
            display: block;
            margin: 0 auto;
        }
        
        .file-info {
            background: var(--light);
            padding: 15px;
            border-radius: 8px;
            margin: 25px 0;
        }
        
        .info-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            padding-bottom: 8px;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .info-row:last-child {
            border-bottom: none;
            margin-bottom: 0;
            padding-bottom: 0;
        }
        
        .action-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 20px;
        }
        
        .progress-container {
            height: 6px;
            background: #e2e8f0;
            border-radius: 3px;
            margin: 20px 0;
            overflow: hidden;
            display: none;
        }
        
        .progress-bar {
            height: 100%;
            background: linear-gradient(to right, var(--primary), var(--secondary));
            width: 0%;
            transition: width 0.3s ease;
        }
        
        @media (max-width: 768px) {
            .preview-container {
                grid-template-columns: 1fr;
            }
            
            .tool-card {
                padding: 20px;
            }
            
            .upload-container {
                padding: 30px 15px;
            }
            
            .action-buttons {
                flex-direction: column;
                gap: 10px;
            }
            
            .btn {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Image Compression Tool</h1>
            <p>Reduce image size while maintaining quality</p>
        </header>

        <div class="tool-card">
            <div id="upload-container" class="upload-container">
                <div class="upload-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"/>
                        <path d="M7.646 1.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 2.707V11.5a.5.5 0 0 1-1 0V2.707L5.354 4.854a.5.5 0 1 1-.708-.708l3-3z"/>
                    </svg>
                </div>
                <h3>Click to upload images</h3>
                <p>or drag and drop files here</p>
                <p class="small">Supports: JPG, PNG, WEBP</p>
                <input type="file" id="file-input" accept="image/*" style="display: none;">
            </div>

            <div class="progress-container" id="progress-container">
                <div class="progress-bar" id="progress-bar"></div>
            </div>

            <div id="file-info" class="file-info" style="display: none;">
                <div class="info-row">
                    <span><strong>File Name:</strong></span>
                    <span id="file-name"></span>
                </div>
                <div class="info-row">
                    <span><strong>Original Size:</strong></span>
                    <span id="original-size"></span>
                </div>
                <div class="info-row">
                    <span><strong>Compressed Size:</strong></span>
                    <span id="compressed-size"></span>
                </div>
                <div class="info-row">
                    <span><strong>Reduction:</strong></span>
                    <span id="reduction"></span>
                </div>
            </div>

            <div class="controls">
                <div class="slider-container">
                    <label for="quality-slider">Compression Quality</label>
                    <input type="range" id="quality-slider" min="10" max="100" value="80">
                    <div class="value-display">
                        <span>Low (10)</span>
                        <span id="quality-value">80</span>
                        <span>High (100)</span>
                    </div>
                </div>

                <div class="slider-container">
                    <label for="size-slider">Target Size (KB)</label>
                    <input type="range" id="size-slider" min="10" max="500" value="100">
                    <div class="value-display">
                        <span>10KB</span>
                        <span id="size-value">100KB</span>
                        <span>500KB</span>
                    </div>
                </div>
            </div>

            <div id="preview-container" class="preview-container" style="display: none;">
                <div class="image-box">
                    <h3>Original Image</h3>
                    <img id="original-preview" class="image-preview" src="#" alt="Original preview">
                </div>
                <div class="image-box">
                    <h3>Compressed Image</h3>
                    <img id="compressed-preview" class="image-preview" src="#" alt="Compressed preview">
                </div>
            </div>

            <div class="action-buttons">
                <button id="compress-btn" class="btn btn-primary" disabled>Compress Image</button>
                <a id="download-btn" class="btn btn-primary" style="display: none;" download="compressed-image.jpg">Download Image</a>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const uploadContainer = document.getElementById('upload-container');
        const fileInput = document.getElementById('file-input');
        const compressBtn = document.getElementById('compress-btn');
        const downloadBtn = document.getElementById('download-btn');
        const fileInfo = document.getElementById('file-info');
        const previewContainer = document.getElementById('preview-container');
        const originalPreview = document.getElementById('original-preview');
        const compressedPreview = document.getElementById('compressed-preview');
        const fileName = document.getElementById('file-name');
        const originalSize = document.getElementById('original-size');
        const compressedSize = document.getElementById('compressed-size');
        const reduction = document.getElementById('reduction');
        const qualitySlider = document.getElementById('quality-slider');
        const qualityValue = document.getElementById('quality-value');
        const sizeSlider = document.getElementById('size-slider');
        const sizeValue = document.getElementById('size-value');
        const progressContainer = document.getElementById('progress-container');
        const progressBar = document.getElementById('progress-bar');

        // Global variables
        let originalFile = null;
        let compressedBlob = null;
        let targetQuality = 80;
        let targetSizeKB = 100;

        // Event Listeners
        uploadContainer.addEventListener('click', () => fileInput.click());
        
        uploadContainer.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadContainer.style.borderColor = 'var(--primary)';
            uploadContainer.style.backgroundColor = 'rgba(74, 107, 255, 0.1)';
        });
        
        uploadContainer.addEventListener('dragleave', () => {
            uploadContainer.style.borderColor = '#cbd5e0';
            uploadContainer.style.backgroundColor = 'var(--light)';
        });
        
        uploadContainer.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadContainer.style.borderColor = '#cbd5e0';
            uploadContainer.style.backgroundColor = 'var(--light)';
            
            if (e.dataTransfer.files.length) {
                handleFileSelect(e.dataTransfer.files[0]);
            }
        });
        
        fileInput.addEventListener('change', (e) => {
            if (e.target.files.length) {
                handleFileSelect(e.target.files[0]);
            }
        });
        
        compressBtn.addEventListener('click', compressImage);
        
        qualitySlider.addEventListener('input', (e) => {
            targetQuality = parseInt(e.target.value);
            qualityValue.textContent = targetQuality;
        });
        
        sizeSlider.addEventListener('input', (e) => {
            targetSizeKB = parseInt(e.target.value);
            sizeValue.textContent = `${targetSizeKB}KB`;
        });

        // Functions
        function handleFileSelect(file) {
            if (!file.type.match('image.*')) {
                alert('Please select an image file (JPEG, PNG, WEBP, etc.)');
                return;
            }
            
            originalFile = file;
            fileName.textContent = file.name;
            originalSize.textContent = formatFileSize(file.size);
            
            // Show preview
            const reader = new FileReader();
            reader.onload = function(e) {
                originalPreview.src = e.target.result;
                previewContainer.style.display = 'grid';
                fileInfo.style.display = 'block';
                compressBtn.disabled = false;
            };
            reader.readAsDataURL(file);
        }
        
        function compressImage() {
            if (!originalFile) return;
            
            compressBtn.disabled = true;
            compressBtn.textContent = 'Compressing...';
            progressContainer.style.display = 'block';
            progressBar.style.width = '0%';
            
            // Simulate progress (in real app this would be based on actual compression progress)
            let progress = 0;
            const progressInterval = setInterval(() => {
                progress += 5;
                progressBar.style.width = `${progress}%`;
                if (progress >= 90) clearInterval(progressInterval);
            }, 100);
            
            const reader = new FileReader();
            reader.onload = function(event) {
                const img = new Image();
                img.src = event.target.result;
                
                img.onload = function() {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    
                    // Calculate dimensions to maintain aspect ratio
                    let width = img.width;
                    let height = img.height;
                    const MAX_DIMENSION = 2000; // Prevent huge canvases
                    
                    if (width > MAX_DIMENSION || height > MAX_DIMENSION) {
                        const ratio = Math.min(MAX_DIMENSION/width, MAX_DIMENSION/height);
                        width *= ratio;
                        height *= ratio;
                    }
                    
                    canvas.width = width;
                    canvas.height = height;
                    ctx.drawImage(img, 0, 0, width, height);
                    
                    // Convert quality to 0-1 range
                    const quality = targetQuality / 100;
                    
                    // Binary search to find optimal compression
                    compressToTargetSize(canvas, targetSizeKB, quality, (compressedDataUrl, finalSizeKB) => {
                        compressedPreview.src = compressedDataUrl;
                        
                        // Get blob from data URL
                        const binaryString = atob(compressedDataUrl.split(',')[1]);
                        const bytes = new Uint8Array(binaryString.length);
                        for (let i = 0; i < binaryString.length; i++) {
                            bytes[i] = binaryString.charCodeAt(i);
                        }
                        compressedBlob = new Blob([bytes], {type: 'image/jpeg'});
                        
                        compressedSize.textContent = formatFileSize(compressedBlob.size);
                        reduction.textContent = calculateReduction(originalFile.size, compressedBlob.size);
                        
                        downloadBtn.href = compressedDataUrl;
                        downloadBtn.style.display = 'inline-block';
                        downloadBtn.setAttribute('download', `compressed-${originalFile.name.replace(/\.[^/.]+$/, '')}.jpg`);
                        
                        compressBtn.disabled = false;
                        compressBtn.textContent = 'Compress Image';
                        progressBar.style.width = '100%';
                        
                        setTimeout(() => {
                            progressContainer.style.display = 'none';
                        }, 500);
                        
                        clearInterval(progressInterval);
                    });
                };
            };
            reader.readAsDataURL(originalFile);
        }
        
        function compressToTargetSize(canvas, targetKB, initialQuality, callback) {
            let minQuality = 0.1;
            let maxQuality = initialQuality;
            let bestDataUrl = null;
            let bestSizeKB = 0;
            let iterations = 0;
            const maxIterations = 8;
            
            // Binary search for optimal quality
            while (iterations < maxIterations) {
                const testQuality = (minQuality + maxQuality) / 2;
                const testDataUrl = canvas.toDataURL('image/jpeg', testQuality);
                const testSizeKB = Math.round((testDataUrl.length * 0.75) / 1024); // Approximate KB
                
                if (Math.abs(testSizeKB - targetKB) < 5 || iterations === maxIterations - 1) {
                    // Close enough or last iteration
                    bestDataUrl = testDataUrl;
                    bestSizeKB = testSizeKB;
                    break;
                }
                
                if (testSizeKB > targetKB) {
                    maxQuality = testQuality;
                } else {
                    minQuality = testQuality;
                    bestDataUrl = testDataUrl;
                    bestSizeKB = testSizeKB;
                }
                
                iterations++;
            }
            
            callback(bestDataUrl, bestSizeKB);
        }
        
        function formatFileSize(bytes) {
            if (bytes < 1024) return bytes + ' bytes';
            else if (bytes < 1048576) return (bytes / 1024).toFixed(2) + ' KB';
            else return (bytes / 1048576).toFixed(2) + ' MB';
        }
        
        function calculateReduction(originalBytes, compressedBytes) {
            const reduction = ((originalBytes - compressedBytes) / originalBytes) * 100;
            return reduction.toFixed(2) + '%';
        }
    </script>
</body>
</html>
